package test;

import commons.Error;
import Lexer.Lexer;
import Parser.*;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: Administrator
 * Date: 13-5-29
 * Time: 下午1:59
 * To change this template use File | Settings | File Templates.
 */

public class ParserTest {
    public static void main(String[] args) throws IOException {
        File file = new File("E:/in.txt");
        Lexer lexer = new Lexer(file);
        lexer.execute();
        Parser parser = new Parser(lexer.tokenList);
        parser.execute();
        ParserTree parserTree = parser.getParserTree();
        //parserTree.output();
        List<Error> errorList = parser.getErrorList();
        if(!errorList.isEmpty()) {
            for(Error error : errorList) {
                System.out.println(error.getLineNum() + ":" + error.getMsg());
            }
        }
        /*int[][] parsertable = {
                {-1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1,},
                {-1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,},
                {-1, -1, 3, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, 2,},
                {-1, -1, 4, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1,},
                {-1, -1, 6, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 9, -1, 8, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, 10, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, 13, -1, -1, -1,},
                {-1, -1, 14, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, 17, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, 19, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1,},
                {-1, 22, 21, 22, 21, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, 22, -1, -1, -1, 22, 22, 22, 22, -1, -1,},
                {-1, -1, 23, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1,},
                {-1, 26, -1, 26, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, 26, -1, -1, -1, 26, 27, 26, 26, -1, -1,},
                {-1, 30, -1, 32, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, 28, -1, -1, -1, 29, -1, 28, 28, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 33, -1, -1, -1, -1, -1, 33, 33, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, 35, 37, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, -1, 38, 38, -1, 38, -1, 38, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 41, 42, 42, -1, 42, -1, 42, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, -1, 43, 44, 43, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, 45, 45, 45, 45, -1, 46, 46, -1, 46, -1, 46, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 47, 49, 50, 51, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, 53, 53, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 54, 54, -1, -1, 55, 55, 55, 55, 55, 55, -1, 55, 55, -1, 55, -1, 55, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 56, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, 58, 58, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 60, 60, 59, 59, 60, 60, 60, 60, 60, 60, -1, 60, 60, -1, 60, -1, 60, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, 61, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, 64, 65, -1, -1,},
                {-1, -1, -1, -1, -1, -1, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, -1, 67, 67, 66, 67, 67, 67, -1, -1, -1, -1, -1, -1,},
                {-1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {70, 69, -1, 69, -1, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, -1, 69, -1, -1, -1, 69, 69, 69, 69, -1, -1,},
                {-1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, 74, -1, -1, -1, -1, -1, 74, 74, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 76, -1, -1, -1, -1, 75, 75, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77, -1, -1, -1, -1, -1, 77, 77, -1, -1,},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1,}
        };
        terminal terminal = new terminal();
        nonterminal nonterminal = new nonterminal();
        for (int i = 0; i < parsertable.length; ++i) {
            for (int j = 0; j < 29; ++j) {
                if (parsertable[i][j] != -1) {
                    system.out.println("predictset.put(\"" + nonterminal.nonterminal[i] + " " + terminal.terminal[j] + "\","
                            + parsertable[i][j] + ");");
                }
            }
            system.out.println();
        }   */
    }
}
